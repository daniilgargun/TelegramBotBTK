from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.keyboards import (
    get_role_keyboard,
    get_groups_keyboard,
    get_teachers_keyboard,
    get_start_keyboard,
    get_schedule_days_keyboard,
    get_study_schedule_keyboard,
    get_settings_keyboard
)
from bot.services.database import Database
from bot.services.parser import ScheduleParser
from bot.config import logger, WEEKDAYS, config
from bot.middlewares import ScheduleFormatter
from bot.decorators import user_exists_check
import os
from datetime import datetime
from bot.utils.date_helpers import format_russian_date, get_russian_weekday

router = Router()
db = Database()
parser = ScheduleParser()


class ScheduleStates(StatesGroup):
    waiting_for_role = State()
    waiting_for_group = State()
    waiting_for_teacher = State()
    waiting_for_day = State()
    waiting_for_admin_message = State()

@router.message(F.text == "–°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞")
@user_exists_check()
async def college_website(message: Message):
    await message.answer(
        "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app={"url": "https://bartc.by/index.php/obuchayushchemusya/dnevnoe-otdelenie/tekushchee-raspisanie"})]
            ]
        )
    )

@router.message(F.text == "üìä –ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±—ã")
@user_exists_check()
async def study_schedule(message: Message):
    await message.answer(
        "üéì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_study_schedule_keyboard()
    )
    
@router.message(F.text == "üìÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞")
@user_exists_check()
async def education_schedule(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        schedule_data = await db.get_schedule_image('education_schedule')
        if not schedule_data:
            await message.answer("‚ùå –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
            
        await message.answer_photo(
            schedule_data['file_id'],
            caption="üìÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞")

@router.message(F.text == "üë• –°–ø–µ—Ü–≥—Ä—É–ø–ø—ã")
@user_exists_check()
async def special_groups(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–≥—Ä—É–ø–ø"""
    schedule_data = await db.get_schedule_image('special_groups')
    if not schedule_data:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–≥—Ä—É–ø–ø –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return
    
    await message.answer_photo(
        schedule_data['file_id'],
        caption="üë• –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø"
    )   

@router.message(F.text == "üîî –ó–≤–æ–Ω–∫–∏")
@user_exists_check()
async def bell_schedule(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤"""
    schedule_data = await db.get_schedule_image('bell_schedule')
    if not schedule_data:
        await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        return
    
    await message.answer_photo(
        schedule_data['file_id'],
        caption="üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"
    )


@router.message(F.text == "–ù–∞–∑–∞–¥")
@user_exists_check()
async def back_to_main_menu(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await message.answer(
        "üéÑ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ë–¢–ö.\n\n‚ùÑÔ∏è –ñ–µ–ª–∞—é –≤–∞–º —É—é—Ç–Ω–æ–π –∑–∏–º—ã –∏ —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω—é! ‚òÉÔ∏è\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        reply_markup=get_start_keyboard(message.from_user.id)
    )
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@user_exists_check()
async def settings_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return

    role_text = user_data.get('role', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    teacher_text = user_data.get('selected_teacher', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    group_text = user_data.get('selected_group', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ùÑÔ∏è\n\n"
    settings_text += f"üë§ –†–æ–ª—å: {role_text}\n"
    
    if role_text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        settings_text += f"üìã –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_text}\n"
    else:
        settings_text += f"üìã –ì—Ä—É–ø–ø–∞: {group_text}\n"

    settings_text += "\n–ó–∏–º–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ:\n"
    settings_text += "üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è - —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–Ω–µ–∂–∏–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è!\n"
    settings_text += "üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –º–µ–∂–¥—É —Å–Ω–µ–≥–æ–≤–∏–∫–æ–º –∏ –µ–ª–∫–æ–π!\n"
    settings_text += "üë®‚Äçüè´ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –∑–∏–º–Ω—é—é –∫–æ–º–∞–Ω–¥—É!\n"
    settings_text += "üìû –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - –µ—Å–ª–∏ –∑–∞–º–µ—Ä–∑ –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!"

    await message.answer(
        settings_text,
        reply_markup=get_settings_keyboard(user_data)
    )

@router.callback_query(lambda c: c.data == "toggle_notifications")
async def toggle_notifications_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    user_data = await db.get_user(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    new_status = not user_data.get('notifications', False)
    if await db.toggle_notifications(user_id, new_status):
        user_data['notifications'] = new_status
        await callback.message.edit_reply_markup(reply_markup=get_settings_keyboard(user_data))
        await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(lambda c: c.data == "change_role")
async def change_role_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    await callback.message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=get_role_keyboard())
    await state.set_state(ScheduleStates.waiting_for_role)
    await callback.answer()

@router.callback_query(lambda c: c.data == "change_group")
async def change_group_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    groups = await db.get_cached_groups()
    if groups:
        await callback.message.answer(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=get_groups_keyboard(groups)
        )
        await state.set_state(ScheduleStates.waiting_for_group)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data == "change_teacher")
async def change_teacher_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teachers = await db.get_cached_teachers()
    if teachers:
        await callback.message.answer(
            "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_teachers_keyboard(teachers)
        )
        await state.set_state(ScheduleStates.waiting_for_teacher)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")

@router.callback_query(lambda c: c.data == "message_admin")
async def message_admin_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    await callback.message.answer(
        "üå®Ô∏è –ó–∏–º–∞ –≤ —Ä–∞–∑–≥–∞—Ä–µ, –∏ –¥–∞–∂–µ —Å–Ω–µ–≥–æ–≤–∏–∫–∏ –ø–∏—à—É—Ç –ø–∏—Å—å–º–∞! üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∫–∞–∫ –î–µ–¥ –ú–æ—Ä–æ–∑, –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∏–¥–µ –æ—Ç–≤–µ—Ç–∞!\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∫–∞–∫ –Ω–µ–Ω—É–∂–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    )
    await state.set_state(ScheduleStates.waiting_for_admin_message)
    await callback.answer()

@router.message(ScheduleStates.waiting_for_admin_message)
async def process_admin_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if not message.text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = (
            f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"üë§ ID: {message.from_user.id}\n"
            f"–ò–º—è: {message.from_user.full_name}\n"
            f"Username: @{message.from_user.username}\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await message.bot.send_message(config.admin_id, admin_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        await state.clear()


@router.message(F.text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@user_exists_check()
async def schedule_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    user_data = await db.get_user(user_id)
    
    if not user_data or not user_data.get('role'):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å")
        await message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_role_keyboard()
        )
        await state.set_state(ScheduleStates.waiting_for_role)
    else:
        role = user_data.get('role')
        if role == '–°—Ç—É–¥–µ–Ω—Ç' and not user_data.get('selected_group'):
            groups = await db.get_groups()
            if not groups:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
                return
            await message.answer(
                "‚ùÑÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∏–º–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! ‚õÑÔ∏è",
                reply_markup=get_groups_keyboard(groups)
            )
            await state.set_state(ScheduleStates.waiting_for_group)
        elif role == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' and not user_data.get('selected_teacher'):
            teachers = await db.get_teachers()
            if not teachers:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
                return
            await message.answer(
                "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                reply_markup=get_teachers_keyboard(teachers)
            )
            await state.set_state(ScheduleStates.waiting_for_teacher)
        else:
            await message.answer(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
                reply_markup=get_schedule_days_keyboard()
            )
            await state.set_state(ScheduleStates.waiting_for_day)

@router.message(ScheduleStates.waiting_for_role)
async def process_role_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text not in ["–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"]:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–æ–ª—å: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–æ–ª—å")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: {message.text}")
    await db.update_user_role(user_id, message.text)

    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        groups = await db.get_groups()
        if not groups:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
            return
        await message.answer(
            "‚ùÑÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∏–º–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! ‚õÑÔ∏è",
            reply_markup=get_groups_keyboard(groups)
        )
        await state.set_state(ScheduleStates.waiting_for_group)
    else:
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        teachers = await db.get_teachers()
        if not teachers:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
        await message.answer(
            "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_teachers_keyboard(teachers)
        )
        await state.set_state(ScheduleStates.waiting_for_teacher)

@router.message(ScheduleStates.waiting_for_group)
async def process_group_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É: {message.text}")
    await db.update_selected_group(user_id, message.text)
    
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=get_schedule_days_keyboard()
    )
    await state.set_state(ScheduleStates.waiting_for_day)

@router.message(ScheduleStates.waiting_for_teacher)
async def process_teacher_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {message.text}")
    await db.update_selected_teacher(user_id, message.text)
    
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=get_schedule_days_keyboard()
    )
    await state.set_state(ScheduleStates.waiting_for_day)

@router.message(ScheduleStates.waiting_for_day)
async def process_day_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    parser = ScheduleParser()
    
    if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule_data = await parser.get_full_schedule(user_data)
        if not schedule_data:
            await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        response = ScheduleFormatter.format_full_schedule(schedule_data, user_data)
        await message.answer(response)
    elif message.text in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]:
        schedule_data = await parser.get_schedule_for_day(message.text.lower(), user_data)
        response = ScheduleFormatter.format_schedule(schedule_data, message.text, user_data)
        await message.answer(response)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –º–µ–Ω—é")
        return
    
    await state.set_state(ScheduleStates.waiting_for_day)