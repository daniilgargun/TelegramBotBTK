from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from bot.config import config, logger


def get_start_keyboard(user_id: int = None) -> ReplyKeyboardMarkup:
    
    kb = [
        [KeyboardButton(text="—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="–°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞")],
        [KeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±—ã")], [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    if user_id is not None and user_id == config.admin_id:
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        kb.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
        
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    return keyboard

def get_admin_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üì± –†–µ—Å—É—Ä—Å—ã", callback_data="admin_performance"),
            InlineKeyboardButton(text=" –ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±—ã", callback_data="admin_study_schedule")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_update")
        ],
        [
            InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text="üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ ID", callback_data="admin_send_id")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_study_schedule_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton(text="üîî –ó–≤–æ–Ω–∫–∏"), KeyboardButton(text="üë• –°–ø–µ—Ü–≥—Ä—É–ø–ø—ã")],
        [KeyboardButton(text="üìÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_role_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç"), KeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
def get_groups_keyboard(groups: list) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    kb = []
    try:
        if not groups:
            logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
            return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True)
            
        sorted_groups = sorted(groups)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è {len(sorted_groups)} –≥—Ä—É–ø–ø")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
        for i in range(0, len(sorted_groups), 2):
            row = [KeyboardButton(text=sorted_groups[i])]
            if i + 1 < len(sorted_groups):
                row.append(KeyboardButton(text=sorted_groups[i + 1]))
            kb.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        kb.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥—Ä—É–ø–ø: {e}")
        kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")]]
        
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_teachers_keyboard(teachers: list) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    if not teachers:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")]]
    else:
        try:
            sorted_teachers = sorted(teachers)
            kb = []
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫
            for i in range(0, len(sorted_teachers), 2):
                row = [KeyboardButton(text=sorted_teachers[i])]
                if i + 1 < len(sorted_teachers):
                    row.append(KeyboardButton(text=sorted_teachers[i + 1]))
                kb.append(row)
            kb.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(sorted_teachers)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
            kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")]]
            
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_schedule_days_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏"""
    kb = [
        [KeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫")],
        [KeyboardButton(text="–°—Ä–µ–¥–∞"), KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥")],
        [KeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞"), KeyboardButton(text="–°—É–±–±–æ—Ç–∞")],
        [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_settings_keyboard(user_data: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    kb = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    notifications_status = "–í—ã–∫–ª" if not user_data.get('notifications') else "–í–∫–ª"
    kb.append([InlineKeyboardButton(
        text=f"üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è: {notifications_status}",
        callback_data="toggle_notifications"
    )])
    
    # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
    kb.append([InlineKeyboardButton(
        text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
        callback_data="change_role"
    )])
    
    # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_data.get('role') == '–°—Ç—É–¥–µ–Ω—Ç':
        kb.append([InlineKeyboardButton(
            text="üìö –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É",
            callback_data="change_group"
        )])
    else:
        kb.append([InlineKeyboardButton(
            text="üë®‚Äçüè´ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            callback_data="change_teacher"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
    kb.append([InlineKeyboardButton(
        text="üìû –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        callback_data="message_admin"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)
