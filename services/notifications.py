from datetime import datetime
from typing import List, Dict
from aiogram import Bot
from bot.config import config, logger
from bot.services.database import Database
from bot.middlewares.schedule_formatter import ScheduleFormatter

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self.formatter = ScheduleFormatter()

    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_data = await self.db.get_schedule()
            if not schedule_data:
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –¥–∞—Ç—É
            last_checked_dates = await self.db.get_last_checked_dates()
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –¥–Ω–∏
            new_dates = set(schedule_data.keys()) - set(last_checked_dates)
            if not new_dates:
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            users = await self.db.get_users_with_notifications()
            if not users:
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for user in users:
                try:
                    user_schedule = {}
                    for date in new_dates:
                        if user['role'] == '–°—Ç—É–¥–µ–Ω—Ç':
                            group = user.get('selected_group')
                            if group and group in schedule_data[date]:
                                user_schedule[date] = schedule_data[date][group]
                        else:  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                            teacher = user.get('selected_teacher')
                            if teacher:
                                lessons = []
                                for group_schedule in schedule_data[date].values():
                                    for lesson in group_schedule:
                                        if lesson.get('teacher') == teacher:
                                            lessons.append(lesson)
                                if lessons:
                                    user_schedule[date] = lessons

                    if user_schedule:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
                        for date in user_schedule:
                            formatted_schedule = self.formatter.format_schedule(
                                user_schedule[date],
                                date,
                                user
                            )
                            await self.bot.send_message(
                                user['user_id'],
                                f"üîî –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n\n{formatted_schedule}",
                                parse_mode="Markdown"
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                    continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
            await self.db.update_last_checked_dates(list(schedule_data.keys()))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}") 